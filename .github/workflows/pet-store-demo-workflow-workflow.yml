jenkinsfile: "#!/usr/bin/env groovy\r\n\r\npipeline {\r\n  agent { label 'executor-v2'\
  \ }\r\n\r\n  options {\r\n    timestamps()\r\n    buildDiscarder(logRotator(numToKeepStr:\
  \ '30'))\r\n  }\r\n\r\n  triggers {\r\n    cron(getDailyCronString())\r\n  }\r\n\
  \r\n  stages {\r\n    stage('Build Docker image') {\r\n      steps {\r\n       \
  \ sh './bin/build'\r\n      }\r\n    }\r\n\r\n    stage('Test') {\r\n      parallel\
  \ {\r\n        stage('Test Postgres') {\r\n          steps {\r\n            sh './test/test\
  \ postgres'\r\n          }\r\n        }\r\n\r\n        stage('Test MySQL') {\r\n\
  \          steps {\r\n            sh './test/test mysql'\r\n          }\r\n    \
  \    }\r\n\r\n        stage('Test MSSQL') {\r\n          steps {\r\n           \
  \ sh './test/test mssql'\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n\
  \    stage('Scan Docker image') {\r\n      parallel {\r\n        stage('Scan Docker\
  \ image for fixable issues') {\r\n          steps{\r\n            script {\r\n \
  \             TAG = sh(returnStdout: true, script: 'cat VERSION')\r\n          \
  \  }\r\n            scanAndReport(\"demo-app:${TAG}\", \"HIGH\", false)\r\n    \
  \      }\r\n        }\r\n        stage('Scan Docker image for all issues') {\r\n\
  \          steps{\r\n            script {\r\n              TAG = sh(returnStdout:\
  \ true, script: 'cat VERSION')\r\n            }\r\n            scanAndReport(\"\
  demo-app:${TAG}\", \"NONE\", true)\r\n          }\r\n        }\r\n      }\r\n  \
  \  }\r\n\r\n    stage('Publish Docker image to registry') {\r\n      when {\r\n\
  \        // Only run this stage when it's a tag build matching vA.B.C\r\n      \
  \  tag(\r\n          pattern: \"^v[0-9]+\\\\.[0-9]+\\\\.[0-9]+\\$\",\r\n       \
  \   comparator: \"REGEXP\"\r\n        )\r\n      }\r\n\r\n      steps {\r\n    \
  \    sh './bin/publish'\r\n      }\r\n    }\r\n  }\r\n\r\n  post {\r\n    always\
  \ {\r\n      cleanupAndNotify(currentBuild.currentResult)\r\n    }\r\n  }\r\n}\r\
  \n"
