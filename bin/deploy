#!/bin/bash -eu

readonly IMAGE_NAME="demo-app"
readonly IMAGE_TAG="$(cat VERSION)"

readonly OPENSHIFT_IMAGE="${DOCKER_REGISTRY_PATH}/${PROJECT_NAME}/${IMAGE_NAME}:${PROJECT_NAME}"

echo "Create project"
oc delete project pet-store --ignore-not-found=true
oc delete clusterrole secrets-access --ignore-not-found=true
oc new-project pet-store

echo "Publish docker images"
docker login -u _ -p "$(oc whoami -t)" ${DOCKER_REGISTRY_PATH}
docker tag "${IMAGE_NAME}:${IMAGE_TAG}" "${OPENSHIFT_IMAGE}"
docker push "${OPENSHIFT_IMAGE}"

# pushd file_writer
#   docker build . -t "filewriter:latest"
# popd

docker tag "conjur-authn-k8s-client:dev" "${DOCKER_REGISTRY_PATH}/${PROJECT_NAME}/conjur-sidecar"
docker push "${DOCKER_REGISTRY_PATH}/${PROJECT_NAME}/conjur-sidecar"

echo "Add pull secret"
oc secrets new-dockercfg dockerpullsecret \
      --docker-server=${DOCKER_REGISTRY_PATH} \
      --docker-username=_ \
      --docker-password=$(oc whoami -t) \
      --docker-email=_
oc secrets add serviceaccount/default secrets/dockerpullsecret --for=pull

echo "Create deployment"
oc create -f cluster-ClusterAdmin.yml
oc create -f project-ClusterAdmin.yml
oc create -f project-DevOperator.yml
oc create -f app-env-DevOperator.yml
oc create -f app-file-DevOperator.yml

echo "Expose service"
oc expose service/pet-store-file
oc expose service/pet-store-env


# docker run --rm -i openshift/origin-cli /bin/bash <<EOF
#   main() {
#     # Login
#     oc login $OPENSHIFT_URL \
#       --username="$OPENSHIFT_USER" \
#       --password="$OPENSHIFT_PASSWORD" \
#       --insecure-skip-tls-verify=true

#     # Ensure namespace exists
#     if has_namespace "${PROJECT_NAME}"; then
#       echo "Namespace already exists."
#     else
#       oc new-project "${PROJECT_NAME}" \
#         --description="Pet Store from Pitch to Production" \
#         --display-name="Pet Store"
#     fi

#     oc delete all -l app=pet-store

#     # Deploy container
#     oc new-app p2p-pet-store/demo-app:p2p-pet-store --name=pet-store

#     oc expose svc/pet-store
#   }

#   has_namespace() {
#     if oc get namespace "\$1" &> /dev/null; then
#       true
#     else
#       false
#     fi
#   }

#   # has_serviceaccount() {
#   #   oc get serviceaccount "\$1" &> /dev/null;
#   # }

#   main

# EOF
